
package gomoku;

import java.awt.Color;
import java.awt.event.ActionListener;
import javax.swing.JButton;

public class CellView extends javax.swing.JPanel {
    
    //vars
    private int row, col;
    private boolean locked;
    private Color theColor;
    private boolean clicked;

    /**
     * Creates new form CellView
     */
    public CellView() {
        initComponents();
    }
    
    /**
     * Constructs a cell view
     * @param row the row of the cell
     * @param col the col of the cell
     */
    public CellView(int row, int col) {
        initComponents();
        this.row = row;
        this.col = col;
        this.locked = false;
        this.theColor = GomokuVariables.blank;
        this.clicked = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cellBTN = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(24, 24));
        setMinimumSize(new java.awt.Dimension(24, 24));
        setPreferredSize(new java.awt.Dimension(24, 24));

        cellBTN.setBackground(new java.awt.Color(200, 200, 200));
        cellBTN.setMaximumSize(new java.awt.Dimension(24, 24));
        cellBTN.setMinimumSize(new java.awt.Dimension(24, 24));
        cellBTN.setPreferredSize(new java.awt.Dimension(24, 24));
        cellBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cellBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cellBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cellBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cellBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cellBTNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cellBTNActionPerformed
  
    /**
     * gets the row of the cell
     * @return Cell row
     */
    public int getRow(){
        return this.row;
    }
    
    /**
     * gets the col of the cell
     * @return Cell col
     */
    public int getCol(){
        return this.col;
    }
    
    /**
     * sets the boolean locked to true
     */
    public void lockCell(){
        this.locked = true;
    }
    
    /**
     * checks to see if the cell is locked
     * @return true if cell is locked, else false
     */
    public boolean isLocked(){
        return this.locked;
    }
    
    /**
     * checks to see if the cell has been clicked
     * @return true if clicked, else false
     */
    public boolean isClicked(){
        return this.clicked;
    }
    
    /**
     * adds a listener to the cell view
     * @param listenerForClick
     */
    public void cellListener(ActionListener listenerForClick){
        cellBTN.addActionListener(listenerForClick);
    }
    
    /**
     * clicks the cell ? if not clicked: if clicked
     */
    public void click(){
        if(this.clicked = true){
            setCellColor(GomokuVariables.blank);
            this.clicked = false;
        }
        else{
            this.clicked = true;
            setCellColor(GomokuVariables.myColor);
        }
    }
    
    /**
     * sets the background of the cell button
     * @param theColor the color that the background will be set to
     */
    public void setCellColor(Color theColor){
        this.theColor = theColor;
        cellBTN.setBackground(theColor);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cellBTN;
    // End of variables declaration//GEN-END:variables
}
