package gomoku;

import java.awt.event.ActionListener;
import javax.swing.DefaultListModel;

public class LobbyView extends javax.swing.JFrame {

    /**
     * Creates new form Lobby
     */
    public LobbyView() {
        initComponents();
        this.getContentPane().setBackground(GomokuVariables.blank);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        onlineUsersLabel = new javax.swing.JLabel();
        challengeBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        myStatsTA = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        otherPlayersStatsTA = new javax.swing.JTextArea();
        pendingLabel = new javax.swing.JLabel();
        outgoingLabel = new javax.swing.JLabel();
        acceptPendingBT = new javax.swing.JButton();
        declinePendingBT = new javax.swing.JButton();
        revokeBT = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        onlineList = new javax.swing.JList<String>();
        jScrollPane6 = new javax.swing.JScrollPane();
        incomingList = new javax.swing.JList<String>();
        jScrollPane7 = new javax.swing.JScrollPane();
        outgoingRequests = new javax.swing.JList<String>();
        opponentStatsBTN = new javax.swing.JButton();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lobby");
        setBackground(new java.awt.Color(255, 255, 255));

        onlineUsersLabel.setText("Online Users");

        challengeBTN.setText("Challenge Player");

        jLabel1.setText("Your Stats");

        myStatsTA.setEditable(false);
        myStatsTA.setColumns(14);
        myStatsTA.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        myStatsTA.setRows(4);
        myStatsTA.setMinimumSize(new java.awt.Dimension(4, 22));
        jScrollPane2.setViewportView(myStatsTA);

        jLabel2.setText("Selected Player's Stats");

        otherPlayersStatsTA.setEditable(false);
        otherPlayersStatsTA.setColumns(14);
        otherPlayersStatsTA.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        otherPlayersStatsTA.setRows(4);
        jScrollPane3.setViewportView(otherPlayersStatsTA);

        pendingLabel.setText("Pending Requests");

        outgoingLabel.setText("Outgoing Requests");

        acceptPendingBT.setText("Accept");

        declinePendingBT.setText("Decline");

        revokeBT.setText("Revoke");

        jScrollPane1.setViewportView(onlineList);

        incomingList.setFixedCellHeight(17);
        jScrollPane6.setViewportView(incomingList);

        outgoingRequests.setFixedCellHeight(17);
        jScrollPane7.setViewportView(outgoingRequests);

        opponentStatsBTN.setText("Get Stats");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onlineUsersLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(challengeBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(opponentStatsBTN)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(acceptPendingBT)
                                .addGap(18, 18, 18)
                                .addComponent(declinePendingBT))
                            .addComponent(outgoingLabel)
                            .addComponent(pendingLabel)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(revokeBT)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onlineUsersLabel)
                    .addComponent(pendingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(challengeBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(5, 5, 5)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(acceptPendingBT)
                                    .addComponent(declinePendingBT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outgoingLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(revokeBT)
                            .addComponent(opponentStatsBTN))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LobbyView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LobbyView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LobbyView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LobbyView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LobbyView().setVisible(true);
                //dlm = new DefaultListModel();
            }
        });
    }
    
    /**
     * adds an actionLIstener to the stats button
     * @param listenerForOpponentStatsBTN actionlistener being added
     */
    public void opponentStatsListener(ActionListener listenerForOpponentStatsBTN){
        opponentStatsBTN.addActionListener(listenerForOpponentStatsBTN);
    }
    
    /**
     * adds an actionLIstener to the challenge button
     * @param listenerForChallengeBTN actionLIstener being added
     */
    public void challengePlayerListener(ActionListener listenerForChallengeBTN){
        challengeBTN.addActionListener(listenerForChallengeBTN);
    }
    
    /**
     * adds an actionListener to the accept buttn
     * @param listenerForAcceptBTN actionLIstener being added
     */
    public void acceptListener(ActionListener listenerForAcceptBTN){
        acceptPendingBT.addActionListener(listenerForAcceptBTN);
    }
    
    /**
     * adds an actionListener to the reject button
     * @param listenerForRejectBTN actionListener being added
     */
    public void rejectListener(ActionListener listenerForRejectBTN){
        declinePendingBT.addActionListener(listenerForRejectBTN);
    }
    
    /**
     * adds an actionLIstner to the withdraw buttn
     * @param listenerForWithdrawBTN actionLIstener being added
     */
    public void withdrawListener(ActionListener listenerForWithdrawBTN){
        revokeBT.addActionListener(listenerForWithdrawBTN);
    }
    
    /**
     * gets the username of the selected user in the onlineList
     * @return username of selected value
     */
    public String getSelectedUsername(){
        return onlineList.getSelectedValue();
    }
    
    /**
     * gets the username of the selected user in the incomingList
     * @return username of selected value
     */
    public String getIncomingUsername(){
        return incomingList.getSelectedValue();
    }
    
    /**
     * gets the username of the selected user in the outgoingList
     * @return username of the select value
     */
    public String getOutgoingUsername(){
        return outgoingRequests.getSelectedValue();
    }
    
    /**
     * updates the online list
     * @param dlm default list model for the online list
     */
    public void updateOnlineList(DefaultListModel<String> dlm){
        onlineList.setModel(dlm);
    }
    
    /**
     * updates the incoming list
     * @param idlm defualt list model of the incoming list
     */
    public void updateIncomingList(DefaultListModel<String> idlm){
        incomingList.setModel(idlm);
    }
    
    /**
     * updates the outgoing list
     * @param odlm default list model of the outgoing list
     */
    public void updateOutgoingList(DefaultListModel<String> odlm){
        outgoingRequests.setModel(odlm);
    }

    /**
     * displays the stats of a player
     * @param stats string representation of the stats
     */
    public void displayMyStats(String stats){
        myStatsTA.append(stats+"\n");
    }

    /**
     * clears the opponent stats view
     */
    public void clearOppStats(){
        otherPlayersStatsTA.setText("");
    }

    /**
     * displays the stats of an opponent
     * @param stats string representation of the stats of the opponent
     */
    public void displayOppStats(String stats){
        otherPlayersStatsTA.append(stats+"\n");
    }
    
    //private static DefaultListModel dlm;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptPendingBT;
    private javax.swing.JButton challengeBTN;
    private javax.swing.JButton declinePendingBT;
    private javax.swing.JList<String> incomingList;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea myStatsTA;
    private javax.swing.JList<String> onlineList;
    private javax.swing.JLabel onlineUsersLabel;
    private javax.swing.JButton opponentStatsBTN;
    private javax.swing.JTextArea otherPlayersStatsTA;
    private javax.swing.JLabel outgoingLabel;
    private javax.swing.JList<String> outgoingRequests;
    private javax.swing.JLabel pendingLabel;
    private javax.swing.JButton revokeBT;
    // End of variables declaration//GEN-END:variables
}
